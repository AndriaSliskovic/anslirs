<?php
namespace Tests\Feature;

use App\Category;
use App\Oblast;
use App\Post;
use App\Tipovi;
use function PMA\Util\get;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Validation\ValidationException;


class PostTest extends TestCase
{
//    use DatabaseMigrations;
    protected $posts;
    protected $category;
    protected $tipovi;
    protected $oblast;
    protected $ruta;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->ruta='/admin/postovi/';
    }

    //Kreiranje vise postova odjednom
    public function makePostsWithCategory($brojPostova,$brojKategorija=null){

        //Kreiranje zavisnih tabela
        $this->category=factory(Category::class,$brojKategorija)->create();
        $this->tipovi=factory(Tipovi::class)->create();
        $this->posts=factory(Post::class,$brojPostova)->create(['category_id'=>$this->category->id,'tipovi_id'=>$this->tipovi->id,'user_id'=>$this->user->id]);
    }
    //Kreiranje samo jednog posta
    public function createNewPost($atributi=[]){
        $this->oblast=factory(Oblast::class)->create();
        $this->category=factory(Category::class)->create(['oblast_id'=>$this->oblast->id]);
        $this->tipovi=factory(Tipovi::class)->create();
        $defaultniAtributi=array('category_id'=>$this->category->id,'tipovi_id'=>$this->tipovi->id,'user_id'=>$this->user->id);
        $this->posts=factory(Post::class)->create(array_merge($defaultniAtributi,$atributi));
    }
    //Setuje novu vrednost posta
    public function makeNewPost($atributi=[]){
        $defaultniAtributi=array('category_id'=>1,'tipovi_id'=>1,'user_id'=>1);
        $this->posts=factory(Post::class)->make(array_merge($defaultniAtributi,$atributi));

    }

    /**
     * @test
     */
    public function post_ima_naslov(){
//        $category=new Category(['name'=>'kategorija']);
        $post=createFactory(Post::class,['naslov'=>'Naslov posta']);
//        Da li je upisano u bazu
        $this->assertDatabaseHas('posts', ['naslov'=>$post->naslov])
//         Da li je vraceno u model
            ->assertEquals('Naslov posta',$post->naslov);

    }

    /**
     * @test
     */
    public function testiraj_postove_sa_pripadajucom_kategorijom(){
        $brojPostova=2;
        $this->makePostsWithCategory($brojPostova);
        //Da li post pripada kategoriji
        //Koliko je upisanih postova u bazi
        $this->assertEquals($this->category->id,$this->posts->first()->category_id);
        //Koliko je upisanih postova
        $this->assertEquals($brojPostova,$this->posts->count());
        //Koliko je upisanih postova u bazi
        $this->assertDatabaseHas('posts', ['category_id'=>$this->category->id]);
    }

    /*------------------------------
            TESTIRANJE RUTA
    --------------------------------*/

    /*-------INDEX-----------*/

    /**
     * @test
     */
    public function moze_videti_index_stranicu_za_postove_u_admin_panelu(){
        $brojPostova=2;
        $this->makePostsWithCategory($brojPostova);
//    dd($this->posts);
        //Provera da li se ucitava stranica
        $index = $this->get($this->ruta);
        $index->assertStatus(200);
        $prviPost=$this->posts->first();

        /*Elementi stranice
        Naslov prvog posta
        Dugme promeni
        Dugme za unos novog posta
        Podaci za logovanog usera
        Podaci iz settingsa
        */
        $index->assertSee($prviPost->naslov)
        ->assertSee('Promeni')
        ->assertSee('Unesi novi zapis')
        ->assertSee($this->user->name)
        ->assertSee($this->user->email)
        ->assertSee($this->settings->imeSajta);

    }

    /*-----EDIT STRANICA--------*/


    /**
     * @test
     */
    public function moze_videti_edit_stranicu_za_odredjeni_post(){
        $setAtribute=['naslov'=>'testNaslov'];
        //Kreira tabelu sa postovima i povezanim tabelama
        $this->createNewPost($setAtribute);
        //Provervava da li je setovani atribut upisan u model
        $this->assertEquals($setAtribute['naslov'],$this->posts->naslov);
        //Provervava da li je setovani atribut upisan u bazu
        $this->assertDatabaseHas('posts', ['naslov'=>$setAtribute['naslov']]);
        //Proverava broj upisanih zapisa
        $this->assertEquals(1,$this->posts->count());
        //Poziva edit rutu
        $editRuta=$this->ruta.$this->posts->id.'/edit';
        $edit = $this->get($editRuta);
        $edit->assertStatus(200)
        ->assertSee($this->posts->naslov);
    }

    /*-----STORE CONTROLLER--------*/

    /**
     * @test
     */
    public function moze_kreirati_postove_preko_kontrolera(){
        //Kreira tabelu sa postovima
        $this->createNewPost();
        $this->assertEquals(1,$this->posts->count());
        //Kreira novi post koji treba upisati
        $noviPost=factory(Post::class)->make();;
        //putanja za store rutu
        $this->post($this->ruta,$noviPost->toArray())
            //Treba da vrati na pocetnu rutu (da relouduje stranicu na index)
            ->assertRedirect($this->ruta);
        //Treba da vidi dva posta
        $this->assertEquals(2,$this->posts->count());
        //Provera da nisu isti
        $this->assertNotEquals($this->posts->first()->naslov,$noviPost->naslov,'Postovi nisu jednaki');
        //Vracanje na index rutu
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            ->assertSee($this->posts->first()->naslov)
            ->assertSee($noviPost->naslov);
        //Resiti problem sa ucitavanjem slike
    }

    /*-----UPDATE CONTROLLER--------*/

    /**
     * @test
     */
    public function moze_promeniti_post(){
        //Kreira tabelu sa postovima
        $this->createNewPost();
        $this->assertEquals(1,$this->posts->count());
        $stariPost=$this->posts;
        //Na index stranici treba da vidi upisan prvi post
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
        ->assertSee($this->posts->naslov);

        $noviPost=factory(Post::class)->make();;
        $updateRuta=$this->ruta.$this->posts->id;
        $this->put($updateRuta,$noviPost->toArray())
            //Treba da vrati na pocetnu rutu (da relouduje stranicu na index)
            ->assertRedirect($this->ruta);
        //Na index stranici treba da vidi upisan izmenjeni novi post a da ne vidi prethodni
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            ->assertSee($noviPost->naslov)
            ->assertDontSee($stariPost->naslov);
        //Treba da ostane samo jedan upisan post
        $this->assertEquals(1,$this->posts->count());
    }


    /*-----DELETE CONTROLLER--------*/

    /**
     * @test
     */

    public function obrisi_upisani_post(){
        //Kreira tabelu sa postovima
        $this->createNewPost();
        $this->assertEquals(1,$this->posts->count());
        $postZaBrisanje=$this->posts;
//        dd($postZaBrisanje->slika);
        //Na index stranici treba da vidi upisan post
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            ->assertSee($postZaBrisanje->naslov);

        $deleteRuta=$this->ruta.$this->posts->id;
        $this->delete($deleteRuta,$this->posts->toArray())
            //Treba da vrati na pocetnu rutu (da relouduje stranicu na index)
            ->assertRedirect($this->ruta);
        $this->assertEquals(0,$this->posts->count());
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            ->assertDontSee($postZaBrisanje->naslov);


    }

    /*-----INVALIDNI PODACI------*/
    /**
     * @test
     */

    public function ne_mogu_se_upisati_invalidne_vrednosti_u_required_polje(){
        $this->createNewPost();
        $validanPost=$this->posts;
        //Proverava da li je upisan validan post
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
        ->assertSee($validanPost->naslov);

        //Setuje invalidan post
        $setAtribute=['naslov'=>null,'sadrzaj'=>null];
        $this->makeNewPost($setAtribute);
        $invalidPost=$this->posts;

        //Poziva store rutu i trazi gresku u sesiji
        $this->withExceptionHandling()->post($this->ruta,$invalidPost->toArray())
            //Trazi bilo koju gresku u sessionu
            ->assertSessionHasErrors()
            //Trazi gresku u sesiji za navedena polja
            ->assertSessionHasErrors(['naslov','sadrzaj']);
        //Proverava da invalidan post nije upisan
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            ->assertSee('Potrebno je uneti sadrzaj');

    }

    /**
     * @test
     */
    public function ne_mogu_se_upisati_invalidni_podaci_definisani_za_model(){
        //Skracena varijanta
        //Setuje invalidan post
        $setAtribute=['naslov'=>'a','sadrzaj'=>'b'];
        $this->createNewPost($setAtribute);
        $invalidPost=$this->posts;
        $this->withExceptionHandling()->post($this->ruta,$invalidPost->toArray())
            //Trazi bilo koju gresku u sessionu
            ->assertSessionHasErrors()
            //Trazi gresku u sesiji za navedena polja
            ->assertSessionHasErrors(['naslov','sadrzaj']);
        //Proverava da invalidan post nije upisan
        $index = $this->get($this->ruta);
        $index->assertStatus(200)
            //Provera poruke preko toastera
            ->assertSee('naslov mora imati minimalno 2 karaktera')
            ->assertSee('sadrzaj mora imati minimalno 2 karaktera');
    }


}
